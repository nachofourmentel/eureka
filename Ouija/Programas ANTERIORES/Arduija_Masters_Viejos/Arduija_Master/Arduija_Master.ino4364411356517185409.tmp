#include <avr/pgmspace.h>
#include <AccelStepper.h>//include the Accel Stepper Library 
#define MAX_ARRAY_LENGTH 32

// Definicion de ambos motores
AccelStepper stepperX(1, 2, 3);     //X axis
AccelStepper stepperY(1, 9, 8);     //Y axis   //(driver=true, step, dir)

int enableX = 7;  //Enables de los motores (Cambiar)
int enableY = 13;

//Punteros
long posX = 0; 
long posY = 0;

int switch_x_left = A0;    //Fines de carrera
int switct_y_top = A1;

//No se usan por ahora
//int switch_x_right = A3;
//int switch_y_bottom =A4;


// int bigButton = 12;     //Boton que da inicio a X secuencia

long randomNumber;  //Numero random para disparar mensajes.

//Lista de letras. Usando movewithkeyboard() podes sacarla posicion en pasos de cada letra.
//unsigned int coordinatesTable[39][3] = {
int coordinatesTable[39][3] = {

  1000,2600,'a',
  2800,1900,'b',
  11000,8700,'c',
  6100,1500,'d',
  7100,-5900,'e',
  9300,1100,'f',
  11800,1200,'g',
  13800,5800,'h',
  15500,1100,'i',
  16800,1500,'j',
  18700,1700,'k',
  20300,2100,'l',
  22800,2500,'m',
  1200,4500,'n',
  2500,3900,'o',
  4300,3400,'p',
  6000,3200,'q',
  7900,2800,'r',
  9300,-7600,'s',
  11500,2600,'t',
  13400,8000,'u',
  15400,2700,'v',
  17200,2800,'w',
  19400,3400,'x',
  20800,4000,'y',
  22800,4500,'z',
  0,0,'0',
  4100,-12400,'1',
  0,0,'2',
  0,0,'3',
  10700, 12900,'4',
  0,0,'5',
  0,0,'6',
  14800,-12400,'8',
  0,0,'9',
  4400,10,'+',//YES
  19900,10,'-',//NO
  0,0,'!',//GOODBYE
  11700,100,'.'//SPACE
};




//------------------------------------------------------------------------------


void setup()
{  
  Serial.begin(115200);//Serial print for debug
  //pinMode(bigButton, INPUT_PULLUP);     //Pullup evita tener que usar resistencia.
  randomSeed(analogRead(0));            //Read analog(0) for random number generation 
  
  pinMode(enableX, OUTPUT);
  pinMode(enableY, OUTPUT);
  digitalWrite(enableX, HIGH);          //Prende/Apaga los motores. Checkear
  digitalWrite(enableY, HIGH);
  
  
//Aceleracion y velocidad de los motores ESTO INFLUYE EN LAS POSICIONES.
  stepperX.setMaxSpeed(3500.0);
  stepperX.setAcceleration(6000.0);
  stepperY.setMaxSpeed(1500.0);
  stepperY.setAcceleration(2000.0);

  pinMode(switch_x_left, INPUT_PULLUP);  //Instalar estos dos sensores
  pinMode(switct_y_top, INPUT_PULLUP);
  
//  pinMode(switch_x_right, INPUT_PULLUP); //Sensores extras de los fondos, sin uso por ahora
//  pinMode(switch_y_bottom, INPUT_PULLUP);

  //Find Zero
   homeing();      
}


//------------------------------------------------------------------------------


void loop()
{
//  if(digitalRead(bigButton) == LOW)     //Boton de inicio si fuera necesario
//  {
   ouijaMessage();     //Selecciona un mensaje de la lsita
//  }

  //Mover con el teclado  W A S D  Para sacar posiciones en pasos.
  //moveWithKeyboard();
}
//------------------------------------------------------------------------------



void enableMotors()
{
  //Enable the motors 
  digitalWrite(enableX, LOW);
  digitalWrite(enableY, LOW);
}
//------------------------------------------------------------------------------
void disableMotors()
{
  //Disable the motors 
  digitalWrite(enableX, HIGH);
  digitalWrite(enableY, HIGH);
}
//------------------------------------------------------------------------------
void homeing()
{
  enableMotors();
  //Primero se mueve eje Y
  
  if(digitalRead(switct_y_top) == HIGH)
  {
    while(digitalRead(switct_y_top) == HIGH)
    {
      stepperY.moveTo(posY);
      stepperY.run();
      posY = posY + 1;
      Serial.println(posY);
    }
    if(digitalRead(switct_y_top) == LOW)
      stepperY.stop();
      posY = 0;
      stepperY.setCurrentPosition(0);
    }
  else
  {
  posY = 0;
  stepperY.setCurrentPosition(0);
  }
  
  if(digitalRead(switch_x_left) == HIGH) 
  {
    while(digitalRead(switch_x_left) == HIGH)
    {
      stepperX.moveTo(posX);    //start moving the X axis back to the home position
      stepperX.run();
      posX = posX - 1;          //decrement the position until we reach 0 (where the switch is triggered) 
      Serial.println(posX);    
    }
    if(digitalRead(switch_x_left) == LOW)           //Once the switch is hit and the signal goes LOW...
      stepperX.stop();    //stop the motor
      posX = 0;     //set this axis position to 0
      stepperX.setCurrentPosition(0);
  }
  else
  {
  posX = 0;
  stepperX.setCurrentPosition(0);
  }
  
  Serial.println("En Posicion");
  disableMotors();
}


//------------------------------------------------------------------------------
void ouijaDelay(void){delay(200);}
//------------------------------------------------------------------------------

//Revisa la tabla hasta encontrar el simbolo que coincide
int findSymbolInTable(char symbol){
  int tableIndex;
  
  for(tableIndex = 0; tableIndex <= 39; tableIndex++){
    //Serial.println(char((coordinatesTable[tableIndex][2])));
    if(symbol == char(coordinatesTable[tableIndex][2])){
      Serial.print("Char FOUND = ");
      Serial.println(tableIndex);
      return tableIndex; //Return the table location
    }
  }
     return -1; //if we got to the point
                // we didn't find our value in the table 
}

//------------------------------------------------------------------------------
//Mueve la plancha hasta el proximo simbolo
void moveToSymbol(char character)
{
  int tableIndex = findSymbolInTable(character);

  Serial.print("x = ");
  Serial.println(coordinatesTable[tableIndex][0]);

  Serial.print("y = ");
  Serial.println(coordinatesTable[tableIndex][1]);
  
  //MoveMotors
  stepperX.moveTo(coordinatesTable[tableIndex][0]);
  stepperY.moveTo(coordinatesTable[tableIndex][1]);
  
  while((stepperX.distanceToGo() != 0) || (stepperX.distanceToGo() != 0)){
    //Serial.println(stepperX.distanceToGo());
    stepperY.run();
    stepperX.run();
    //if(digitalRead(switch_x_right) == LOW || digitalRead(switch_y_bottom) == LOW)
      //homeing();
  }

  return;
}


//------------------------------------------------------------------------------
void ouijaPrint(char* charArray){
  int i;
  for(i = 0; i <= MAX_ARRAY_LENGTH; i++){

    Serial.println("Letra encontrada:")
    Serial.print(charArray[i]); //Debug the array as we move
    if(charArray[i] != 0){
      ouijaDelay();
      moveToSymbol(charArray[i]);
      ouijaDelay();  
      //if(digitalRead(switch_x_right) == LOW || digitalRead(switch_y_bottom) == LOW)
      //homeing();
    } //Only move if there if valid data, if not let the loop run out.
    else break;
  }
  return;
}
//------------------------------------------------------------------------------
//Stores different messages to be speled out by the Ouija 
void ouijaMessage()
{
    enableMotors();
    randomNumber = random(5);//Generate a random number between 1-5
    //switch (randomNumber) //switch messages based on that random number
    switch (0) //switch messages based on that random number

    {
      case 0:
        {char arrayThing[30] = {'s','e', '8', '1',0};
        ouijaPrint(arrayThing);
        delay(4000);
        homeing();}//Go back to home after each massage is printed
        break;
      case 1:
        {
        char arrayThing2[30] = {'s','p','a','r','k','f','u','n',0};
        ouijaPrint(arrayThing2);
        homeing();}
        break;
      case 2:
        {
        char arrayThing3[30] = {'h','a','p','.','p','y','.','h','a','l','.','l','o','w','e','.','e','n',0};;
        ouijaPrint(arrayThing3);
      homeing();}
        break;
      case 3:
        {
        char arrayThing4[30] = {'g','r','a','n','d','m','a','.','s','a','y','s','.','h','i',0};;
        ouijaPrint(arrayThing4);
        homeing();}
        break;
      case 4:
        {
        char arrayThing5[30] = {'l','e','t','.','y','o','u','r','.','g','e','e','k','.','s','h','i','n','e',0};;
        ouijaPrint(arrayThing5);
      homeing();}
        break;
      default: 
        disableMotors();
     }
    disableMotors();
}
//------------------------------------------------------------------------------
//Funcion para mover el sistema con el teclado. WASD  100 pasos
void moveWithKeyboard()
{
  enableMotors();
  if(Serial.available() > 0)
  {
    int temp = Serial.read();
    
    if(temp == 119 || temp == 87)       //dec for 'w'
    {
      stepperY.moveTo(stepperY.currentPosition() - 100);
      //stepperY.setSpeed(2000);
      while(stepperY.distanceToGo() != 0)
      {
        stepperY.run();
      }
      Serial.print(stepperX.currentPosition());
      Serial.print("   ");
      Serial.println(stepperY.currentPosition());
    }
    if(temp == 115 || temp == 83)//dec for 's'
    {
      stepperY.moveTo(stepperY.currentPosition() + 100);
      //stepperY.setSpeed(2000);
      while(stepperY.distanceToGo() != 0)
      {
        stepperY.run();
      } 
      Serial.print(stepperX.currentPosition());
      Serial.print("   ");
      Serial.println(stepperY.currentPosition());
    }
    if(temp == 97 || temp == 65)//dec for 'a'
    {
      stepperX.moveTo(stepperX.currentPosition() - 100);
      //stepperX.setSpeed(3000);
      while(stepperX.distanceToGo() != 0)
      {
        stepperX.run();
      }  
      Serial.print(stepperX.currentPosition());
      Serial.print("   ");
      Serial.println(stepperY.currentPosition());
    }
    if(temp == 100 || temp == 68)//dec for 'd'
    {
      stepperX.moveTo(stepperX.currentPosition() + 100.00);
      //stepperX.setSpeed(3000);
      while(stepperX.distanceToGo() != 0)
      {
        stepperX.run();
      }
      Serial.print(stepperX.currentPosition());
      Serial.print("   ");
      Serial.println(stepperY.currentPosition());
    }
    
    //Moviendose de 10000 pasos
    if(temp == 105 || temp == 73)//dec for 'i'
    {
      stepperY.moveTo(stepperY.currentPosition() - 10000);
      while(stepperY.distanceToGo() != 0)
      {
        stepperY.run();
      }
      Serial.print(stepperX.currentPosition()); Serial.print("   "); Serial.println(stepperY.currentPosition());
    }
    if(temp == 107 || temp == 75)//dec for 'k'
    {
      stepperY.moveTo(stepperY.currentPosition() + 10000);
      //stepperY.setSpeed(2000);
      while(stepperY.distanceToGo() != 0)
      {
        stepperY.run();
      } 
      Serial.print(stepperX.currentPosition()); Serial.print("   "); Serial.println(stepperY.currentPosition());
    }
    if(temp == 106 || temp == 74)//dec for 'j'
    {
      stepperX.moveTo(stepperX.currentPosition() - 10000);
      //stepperX.setSpeed(3000);
      while(stepperX.distanceToGo() != 0)
      {
        stepperX.run();
      }  
      Serial.print(stepperX.currentPosition()); Serial.print("   "); Serial.println(stepperY.currentPosition());
    }
    if(temp == 108 || temp == 76)//dec for 'l'
    {
      stepperX.moveTo(stepperX.currentPosition() + 10000);
      while(stepperX.distanceToGo() != 0)
      {
        stepperX.run();
      }
      Serial.print(stepperX.currentPosition()); Serial.print("   "); Serial.println(stepperY.currentPosition());
    }
  
  }
  disableMotors();
}





